import { startWith } from 'rxjs/operators';
import { sharedPreset } from '../shared-preset/preset';
import { Rect } from './rect';
import { getScrollListener } from './scroll-listener';
export var isVisible = function (_a, getWindow) {
    var element = _a.element, offset = _a.offset, scrollContainer = _a.scrollContainer;
    if (getWindow === void 0) { getWindow = function () { return window; }; }
    var elementBounds = Rect.fromElement(element);
    if (elementBounds === Rect.empty) {
        return false;
    }
    var windowBounds = Rect.fromWindow(getWindow());
    elementBounds.inflate(offset);
    if (scrollContainer) {
        var scrollContainerBounds = Rect.fromElement(scrollContainer);
        var intersection = scrollContainerBounds.getIntersectionWith(windowBounds);
        return elementBounds.intersectsWith(intersection);
    }
    else {
        return elementBounds.intersectsWith(windowBounds);
    }
};
var getObservable = function (attributes) {
    if (attributes.customObservable) {
        return attributes.customObservable.pipe(startWith(''));
    }
    if (attributes.scrollContainer) {
        return getScrollListener(attributes.scrollContainer);
    }
    return getScrollListener(window);
};
var ɵ0 = getObservable;
export var scrollPreset = Object.assign({}, sharedPreset, {
    isVisible: isVisible,
    getObservable: getObservable
});
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2Nyb2xsLXByZXNldC9wcmVzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzlCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXRELE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBZ0MsVUFBQyxFQUFvQyxFQUFFLFNBQXdCO1FBQTVELG9CQUFPLEVBQUUsa0JBQU0sRUFBRSxvQ0FBZTtJQUFJLDBCQUFBLEVBQUEsMEJBQWtCLE9BQUEsTUFBTSxFQUFOLENBQU07SUFDbkgsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoRCxJQUFJLGFBQWEsS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ2hDLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDbEQsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU5QixJQUFJLGVBQWUsRUFBRTtRQUNuQixJQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDaEUsSUFBTSxZQUFZLEdBQUcscUJBQXFCLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDN0UsT0FBTyxhQUFhLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQ25EO1NBQU07UUFDTCxPQUFPLGFBQWEsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDbkQ7QUFDSCxDQUFDLENBQUM7QUFFRixJQUFNLGFBQWEsR0FBb0MsVUFBQyxVQUFzQjtJQUM1RSxJQUFJLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRTtRQUMvQixPQUFPLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDeEQ7SUFDRCxJQUFJLFVBQVUsQ0FBQyxlQUFlLEVBQUU7UUFDOUIsT0FBTyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDdEQ7SUFDRCxPQUFPLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQzs7QUFFRixNQUFNLENBQUMsSUFBTSxZQUFZLEdBQTRCLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRTtJQUNuRixTQUFTLFdBQUE7SUFDVCxhQUFhLGVBQUE7Q0FDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdGFydFdpdGggfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBzaGFyZWRQcmVzZXQgfSBmcm9tICcuLi9zaGFyZWQtcHJlc2V0L3ByZXNldCc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVzLCBHZXRPYnNlcnZhYmxlRm4sIEhvb2tTZXQsIElzVmlzaWJsZUZuIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgUmVjdCB9IGZyb20gJy4vcmVjdCc7XG5pbXBvcnQgeyBnZXRTY3JvbGxMaXN0ZW5lciB9IGZyb20gJy4vc2Nyb2xsLWxpc3RlbmVyJztcblxuZXhwb3J0IGNvbnN0IGlzVmlzaWJsZTogSXNWaXNpYmxlRm48RXZlbnQgfCBzdHJpbmc+ID0gKHsgZWxlbWVudCwgb2Zmc2V0LCBzY3JvbGxDb250YWluZXIgfSwgZ2V0V2luZG93ID0gKCkgPT4gd2luZG93KSA9PiB7XG4gIGNvbnN0IGVsZW1lbnRCb3VuZHMgPSBSZWN0LmZyb21FbGVtZW50KGVsZW1lbnQpO1xuICBpZiAoZWxlbWVudEJvdW5kcyA9PT0gUmVjdC5lbXB0eSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCB3aW5kb3dCb3VuZHMgPSBSZWN0LmZyb21XaW5kb3coZ2V0V2luZG93KCkpO1xuICBlbGVtZW50Qm91bmRzLmluZmxhdGUob2Zmc2V0KTtcblxuICBpZiAoc2Nyb2xsQ29udGFpbmVyKSB7XG4gICAgY29uc3Qgc2Nyb2xsQ29udGFpbmVyQm91bmRzID0gUmVjdC5mcm9tRWxlbWVudChzY3JvbGxDb250YWluZXIpO1xuICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IHNjcm9sbENvbnRhaW5lckJvdW5kcy5nZXRJbnRlcnNlY3Rpb25XaXRoKHdpbmRvd0JvdW5kcyk7XG4gICAgcmV0dXJuIGVsZW1lbnRCb3VuZHMuaW50ZXJzZWN0c1dpdGgoaW50ZXJzZWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxlbWVudEJvdW5kcy5pbnRlcnNlY3RzV2l0aCh3aW5kb3dCb3VuZHMpO1xuICB9XG59O1xuXG5jb25zdCBnZXRPYnNlcnZhYmxlOiBHZXRPYnNlcnZhYmxlRm48RXZlbnQgfCBzdHJpbmc+ID0gKGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZXMpID0+IHtcbiAgaWYgKGF0dHJpYnV0ZXMuY3VzdG9tT2JzZXJ2YWJsZSkge1xuICAgIHJldHVybiBhdHRyaWJ1dGVzLmN1c3RvbU9ic2VydmFibGUucGlwZShzdGFydFdpdGgoJycpKTtcbiAgfVxuICBpZiAoYXR0cmlidXRlcy5zY3JvbGxDb250YWluZXIpIHtcbiAgICByZXR1cm4gZ2V0U2Nyb2xsTGlzdGVuZXIoYXR0cmlidXRlcy5zY3JvbGxDb250YWluZXIpO1xuICB9XG4gIHJldHVybiBnZXRTY3JvbGxMaXN0ZW5lcih3aW5kb3cpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNjcm9sbFByZXNldDogSG9va1NldDxFdmVudCB8IHN0cmluZz4gPSBPYmplY3QuYXNzaWduKHt9LCBzaGFyZWRQcmVzZXQsIHtcbiAgaXNWaXNpYmxlLFxuICBnZXRPYnNlcnZhYmxlXG59KTtcbiJdfQ==