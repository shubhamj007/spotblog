import { empty, Observable } from 'rxjs';
import { sampleTime, share, startWith } from 'rxjs/operators';
var scrollListeners = new WeakMap();
export function sampleObservable(obs, scheduler) {
    return obs.pipe(sampleTime(100, scheduler), share(), startWith(''));
}
// Only create one scroll listener per target and share the observable.
// Typical, there will only be one observable per application
export var getScrollListener = function (scrollTarget) {
    if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {
        console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');
        return empty();
    }
    var scrollListener = scrollListeners.get(scrollTarget);
    if (scrollListener) {
        return scrollListener;
    }
    var srollEvent = Observable.create(function (observer) {
        var eventName = 'scroll';
        var handler = function (event) { return observer.next(event); };
        var options = { passive: true, capture: false };
        scrollTarget.addEventListener(eventName, handler, options);
        return function () { return scrollTarget.removeEventListener(eventName, handler, options); };
    });
    var listener = sampleObservable(srollEvent);
    scrollListeners.set(scrollTarget, listener);
    return listener;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWxpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2Nyb2xsLXByZXNldC9zY3JvbGwtbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQVcsTUFBTSxNQUFNLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUQsSUFBTSxlQUFlLEdBQUcsSUFBSSxPQUFPLEVBQXdCLENBQUM7QUFFNUQsTUFBTSxVQUFVLGdCQUFnQixDQUFJLEdBQWtCLEVBQUUsU0FBZTtJQUNyRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQ2IsVUFBVSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsRUFDMUIsS0FBSyxFQUFFLEVBQ1AsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUNkLENBQUM7QUFDSixDQUFDO0FBRUQsdUVBQXVFO0FBQ3ZFLDZEQUE2RDtBQUM3RCxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBRyxVQUFDLFlBQW1DO0lBQ25FLElBQUksQ0FBQyxZQUFZLElBQUksT0FBTyxZQUFZLENBQUMsZ0JBQWdCLEtBQUssVUFBVSxFQUFFO1FBQ3hFLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEdBQUcsWUFBWSxHQUFHLHlEQUF5RCxDQUFDLENBQUM7UUFDbEgsT0FBTyxLQUFLLEVBQUUsQ0FBQztLQUNoQjtJQUNELElBQU0sY0FBYyxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDekQsSUFBSSxjQUFjLEVBQUU7UUFDbEIsT0FBTyxjQUFjLENBQUM7S0FDdkI7SUFFRCxJQUFNLFVBQVUsR0FBc0IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFDLFFBQXdCO1FBQy9FLElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMzQixJQUFNLE9BQU8sR0FBRyxVQUFDLEtBQVksSUFBSyxPQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQXBCLENBQW9CLENBQUM7UUFDdkQsSUFBTSxPQUFPLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUNsRCxZQUFZLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMzRCxPQUFPLGNBQU0sT0FBQSxZQUFZLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBN0QsQ0FBNkQsQ0FBQztJQUM3RSxDQUFDLENBQUMsQ0FBQztJQUVILElBQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzlDLGVBQWUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzVDLE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVtcHR5LCBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzYW1wbGVUaW1lLCBzaGFyZSwgc3RhcnRXaXRoIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBzY3JvbGxMaXN0ZW5lcnMgPSBuZXcgV2Vha01hcDxhbnksIE9ic2VydmFibGU8YW55Pj4oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNhbXBsZU9ic2VydmFibGU8VD4ob2JzOiBPYnNlcnZhYmxlPFQ+LCBzY2hlZHVsZXI/OiBhbnkpOiBPYnNlcnZhYmxlPFQgfCAnJz4ge1xuICByZXR1cm4gb2JzLnBpcGUoXG4gICAgc2FtcGxlVGltZSgxMDAsIHNjaGVkdWxlciksXG4gICAgc2hhcmUoKSxcbiAgICBzdGFydFdpdGgoJycpXG4gICk7XG59XG5cbi8vIE9ubHkgY3JlYXRlIG9uZSBzY3JvbGwgbGlzdGVuZXIgcGVyIHRhcmdldCBhbmQgc2hhcmUgdGhlIG9ic2VydmFibGUuXG4vLyBUeXBpY2FsLCB0aGVyZSB3aWxsIG9ubHkgYmUgb25lIG9ic2VydmFibGUgcGVyIGFwcGxpY2F0aW9uXG5leHBvcnQgY29uc3QgZ2V0U2Nyb2xsTGlzdGVuZXIgPSAoc2Nyb2xsVGFyZ2V0PzogSFRNTEVsZW1lbnQgfCBXaW5kb3cpOiBPYnNlcnZhYmxlPEV2ZW50IHwgJyc+ID0+IHtcbiAgaWYgKCFzY3JvbGxUYXJnZXQgfHwgdHlwZW9mIHNjcm9sbFRhcmdldC5hZGRFdmVudExpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS53YXJuKCdgYWRkRXZlbnRMaXN0ZW5lcmAgb24gJyArIHNjcm9sbFRhcmdldCArICcgKHNjcm9sbFRhcmdldCkgaXMgbm90IGEgZnVuY3Rpb24uIFNraXBwaW5nIHRoaXMgdGFyZ2V0Jyk7XG4gICAgcmV0dXJuIGVtcHR5KCk7XG4gIH1cbiAgY29uc3Qgc2Nyb2xsTGlzdGVuZXIgPSBzY3JvbGxMaXN0ZW5lcnMuZ2V0KHNjcm9sbFRhcmdldCk7XG4gIGlmIChzY3JvbGxMaXN0ZW5lcikge1xuICAgIHJldHVybiBzY3JvbGxMaXN0ZW5lcjtcbiAgfVxuXG4gIGNvbnN0IHNyb2xsRXZlbnQ6IE9ic2VydmFibGU8RXZlbnQ+ID0gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyOiBTdWJqZWN0PEV2ZW50PikgPT4ge1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9ICdzY3JvbGwnO1xuICAgIGNvbnN0IGhhbmRsZXIgPSAoZXZlbnQ6IEV2ZW50KSA9PiBvYnNlcnZlci5uZXh0KGV2ZW50KTtcbiAgICBjb25zdCBvcHRpb25zID0geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9O1xuICAgIHNjcm9sbFRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IHNjcm9sbFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gIH0pO1xuXG4gIGNvbnN0IGxpc3RlbmVyID0gc2FtcGxlT2JzZXJ2YWJsZShzcm9sbEV2ZW50KTtcbiAgc2Nyb2xsTGlzdGVuZXJzLnNldChzY3JvbGxUYXJnZXQsIGxpc3RlbmVyKTtcbiAgcmV0dXJuIGxpc3RlbmVyO1xufTtcbiJdfQ==