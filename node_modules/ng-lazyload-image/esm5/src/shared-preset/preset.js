import { cssClassNames, hasCssClassName, removeCssClassName, addCssClassName, isImageElement, isChildOfPicture, setSourcesToLazy, setImage, setImageAndSourcesToError, setImageAndSourcesToLazy, setImageAndSourcesToDefault } from '../util';
var end = function (_a) {
    var element = _a.element;
    return addCssClassName(element, cssClassNames.loaded);
};
var ɵ0 = end;
export var loadImage = function (_a) {
    var element = _a.element, useSrcset = _a.useSrcset, imagePath = _a.imagePath, decode = _a.decode;
    var img;
    if (isImageElement(element) && isChildOfPicture(element)) {
        var parentClone = element.parentNode.cloneNode(true);
        img = parentClone.getElementsByTagName('img')[0];
        setSourcesToLazy(img);
        setImage(img, imagePath, useSrcset);
    }
    else {
        img = new Image();
        if (isImageElement(element) && element.sizes) {
            img.sizes = element.sizes;
        }
        if (useSrcset && 'srcset' in img) {
            img.srcset = imagePath;
        }
        else {
            img.src = imagePath;
        }
    }
    if (decode && img.decode) {
        return img.decode().then(function () { return imagePath; });
    }
    return new Promise(function (resolve, reject) {
        img.onload = function () { return resolve(imagePath); };
        img.onerror = function () { return reject(null); };
    });
};
var setErrorImage = function (_a) {
    var element = _a.element, errorImagePath = _a.errorImagePath, useSrcset = _a.useSrcset;
    setImageAndSourcesToError(element, errorImagePath, useSrcset);
    addCssClassName(element, cssClassNames.failed);
};
var ɵ1 = setErrorImage;
var setLoadedImage = function (_a) {
    var element = _a.element, imagePath = _a.imagePath, useSrcset = _a.useSrcset;
    setImageAndSourcesToLazy(element, imagePath, useSrcset);
};
var ɵ2 = setLoadedImage;
var setup = function (_a) {
    var element = _a.element, defaultImagePath = _a.defaultImagePath, useSrcset = _a.useSrcset;
    setImageAndSourcesToDefault(element, defaultImagePath, useSrcset);
    if (hasCssClassName(element, cssClassNames.loaded)) {
        removeCssClassName(element, cssClassNames.loaded);
    }
};
var ɵ3 = setup;
export var isBot = function (navigator) {
    if (navigator && navigator.userAgent) {
        return /googlebot|bingbot|yandex|baiduspider|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora\ link\ preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|duckduckbot/i.test(navigator.userAgent);
    }
    return false;
};
export var sharedPreset = {
    finally: end,
    loadImage: loadImage,
    setErrorImage: setErrorImage,
    setLoadedImage: setLoadedImage,
    setup: setup,
    isBot: isBot
};
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2hhcmVkLXByZXNldC9wcmVzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGFBQWEsRUFDYixlQUFlLEVBQ2Ysa0JBQWtCLEVBQ2xCLGVBQWUsRUFDZixjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixRQUFRLEVBQ1IseUJBQXlCLEVBQ3pCLHdCQUF3QixFQUN4QiwyQkFBMkIsRUFDNUIsTUFBTSxTQUFTLENBQUM7QUFHakIsSUFBTSxHQUFHLEdBQWMsVUFBQyxFQUFXO1FBQVQsb0JBQU87SUFBTyxPQUFBLGVBQWUsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQztBQUE5QyxDQUE4QyxDQUFDOztBQUV2RixNQUFNLENBQUMsSUFBTSxTQUFTLEdBQWdCLFVBQUMsRUFBeUM7UUFBdkMsb0JBQU8sRUFBRSx3QkFBUyxFQUFFLHdCQUFTLEVBQUUsa0JBQU07SUFDNUUsSUFBSSxHQUFxQixDQUFDO0lBQzFCLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3hELElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxVQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBdUIsQ0FBQztRQUM5RSxHQUFHLEdBQUcsV0FBVyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pELGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLFFBQVEsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ3JDO1NBQU07UUFDTCxHQUFHLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNsQixJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQzVDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztTQUMzQjtRQUNELElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxHQUFHLEVBQUU7WUFDaEMsR0FBRyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7U0FDeEI7YUFBTTtZQUNMLEdBQUcsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDO1NBQ3JCO0tBQ0Y7SUFFRCxJQUFJLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO1FBQ3hCLE9BQU8sR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFNLE9BQUEsU0FBUyxFQUFULENBQVMsQ0FBQyxDQUFDO0tBQzNDO0lBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ2pDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsY0FBTSxPQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBbEIsQ0FBa0IsQ0FBQztRQUN0QyxHQUFHLENBQUMsT0FBTyxHQUFHLGNBQU0sT0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQVosQ0FBWSxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsSUFBTSxhQUFhLEdBQW9CLFVBQUMsRUFBc0M7UUFBcEMsb0JBQU8sRUFBRSxrQ0FBYyxFQUFFLHdCQUFTO0lBQzFFLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDOUQsZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDOztBQUVGLElBQU0sY0FBYyxHQUFxQixVQUFDLEVBQWlDO1FBQS9CLG9CQUFPLEVBQUUsd0JBQVMsRUFBRSx3QkFBUztJQUN2RSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzFELENBQUMsQ0FBQzs7QUFFRixJQUFNLEtBQUssR0FBWSxVQUFDLEVBQXdDO1FBQXRDLG9CQUFPLEVBQUUsc0NBQWdCLEVBQUUsd0JBQVM7SUFDNUQsMkJBQTJCLENBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWxFLElBQUksZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDbEQsa0JBQWtCLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNuRDtBQUNILENBQUMsQ0FBQzs7QUFFRixNQUFNLENBQUMsSUFBTSxLQUFLLEdBQVksVUFBQSxTQUFTO0lBQ3JDLElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUU7UUFDcEMsT0FBTyw0TkFBNE4sQ0FBQyxJQUFJLENBQ3RPLFNBQVMsQ0FBQyxTQUFTLENBQ3BCLENBQUM7S0FDSDtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHO0lBQzFCLE9BQU8sRUFBRSxHQUFHO0lBQ1osU0FBUyxXQUFBO0lBQ1QsYUFBYSxlQUFBO0lBQ2IsY0FBYyxnQkFBQTtJQUNkLEtBQUssT0FBQTtJQUNMLEtBQUssT0FBQTtDQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjc3NDbGFzc05hbWVzLFxuICBoYXNDc3NDbGFzc05hbWUsXG4gIHJlbW92ZUNzc0NsYXNzTmFtZSxcbiAgYWRkQ3NzQ2xhc3NOYW1lLFxuICBpc0ltYWdlRWxlbWVudCxcbiAgaXNDaGlsZE9mUGljdHVyZSxcbiAgc2V0U291cmNlc1RvTGF6eSxcbiAgc2V0SW1hZ2UsXG4gIHNldEltYWdlQW5kU291cmNlc1RvRXJyb3IsXG4gIHNldEltYWdlQW5kU291cmNlc1RvTGF6eSxcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9EZWZhdWx0XG59IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgRmluYWxseUZuLCBMb2FkSW1hZ2VGbiwgU2V0RXJyb3JJbWFnZUZuLCBTZXRMb2FkZWRJbWFnZUZuLCBTZXR1cEZuLCBJc0JvdEZuIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBlbmQ6IEZpbmFsbHlGbiA9ICh7IGVsZW1lbnQgfSkgPT4gYWRkQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMubG9hZGVkKTtcblxuZXhwb3J0IGNvbnN0IGxvYWRJbWFnZTogTG9hZEltYWdlRm4gPSAoeyBlbGVtZW50LCB1c2VTcmNzZXQsIGltYWdlUGF0aCwgZGVjb2RlIH0pID0+IHtcbiAgbGV0IGltZzogSFRNTEltYWdlRWxlbWVudDtcbiAgaWYgKGlzSW1hZ2VFbGVtZW50KGVsZW1lbnQpICYmIGlzQ2hpbGRPZlBpY3R1cmUoZWxlbWVudCkpIHtcbiAgICBjb25zdCBwYXJlbnRDbG9uZSA9IGVsZW1lbnQucGFyZW50Tm9kZSEuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxQaWN0dXJlRWxlbWVudDtcbiAgICBpbWcgPSBwYXJlbnRDbG9uZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW1nJylbMF07XG4gICAgc2V0U291cmNlc1RvTGF6eShpbWcpO1xuICAgIHNldEltYWdlKGltZywgaW1hZ2VQYXRoLCB1c2VTcmNzZXQpO1xuICB9IGVsc2Uge1xuICAgIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgIGlmIChpc0ltYWdlRWxlbWVudChlbGVtZW50KSAmJiBlbGVtZW50LnNpemVzKSB7XG4gICAgICBpbWcuc2l6ZXMgPSBlbGVtZW50LnNpemVzO1xuICAgIH1cbiAgICBpZiAodXNlU3Jjc2V0ICYmICdzcmNzZXQnIGluIGltZykge1xuICAgICAgaW1nLnNyY3NldCA9IGltYWdlUGF0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW1nLnNyYyA9IGltYWdlUGF0aDtcbiAgICB9XG4gIH1cblxuICBpZiAoZGVjb2RlICYmIGltZy5kZWNvZGUpIHtcbiAgICByZXR1cm4gaW1nLmRlY29kZSgpLnRoZW4oKCkgPT4gaW1hZ2VQYXRoKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaW1nLm9ubG9hZCA9ICgpID0+IHJlc29sdmUoaW1hZ2VQYXRoKTtcbiAgICBpbWcub25lcnJvciA9ICgpID0+IHJlamVjdChudWxsKTtcbiAgfSk7XG59O1xuXG5jb25zdCBzZXRFcnJvckltYWdlOiBTZXRFcnJvckltYWdlRm4gPSAoeyBlbGVtZW50LCBlcnJvckltYWdlUGF0aCwgdXNlU3Jjc2V0IH0pID0+IHtcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9FcnJvcihlbGVtZW50LCBlcnJvckltYWdlUGF0aCwgdXNlU3Jjc2V0KTtcbiAgYWRkQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMuZmFpbGVkKTtcbn07XG5cbmNvbnN0IHNldExvYWRlZEltYWdlOiBTZXRMb2FkZWRJbWFnZUZuID0gKHsgZWxlbWVudCwgaW1hZ2VQYXRoLCB1c2VTcmNzZXQgfSkgPT4ge1xuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0xhenkoZWxlbWVudCwgaW1hZ2VQYXRoLCB1c2VTcmNzZXQpO1xufTtcblxuY29uc3Qgc2V0dXA6IFNldHVwRm4gPSAoeyBlbGVtZW50LCBkZWZhdWx0SW1hZ2VQYXRoLCB1c2VTcmNzZXQgfSkgPT4ge1xuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0RlZmF1bHQoZWxlbWVudCwgZGVmYXVsdEltYWdlUGF0aCwgdXNlU3Jjc2V0KTtcblxuICBpZiAoaGFzQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMubG9hZGVkKSkge1xuICAgIHJlbW92ZUNzc0NsYXNzTmFtZShlbGVtZW50LCBjc3NDbGFzc05hbWVzLmxvYWRlZCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpc0JvdDogSXNCb3RGbiA9IG5hdmlnYXRvciA9PiB7XG4gIGlmIChuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCkge1xuICAgIHJldHVybiAvZ29vZ2xlYm90fGJpbmdib3R8eWFuZGV4fGJhaWR1c3BpZGVyfGZhY2Vib29rZXh0ZXJuYWxoaXR8dHdpdHRlcmJvdHxyb2dlcmJvdHxsaW5rZWRpbmJvdHxlbWJlZGx5fHF1b3JhXFwgbGlua1xcIHByZXZpZXd8c2hvd3lvdWJvdHxvdXRicmFpbnxwaW50ZXJlc3RcXC8wXFwufHBpbnRlcmVzdGJvdHxzbGFja2JvdHx2a1NoYXJlfFczQ19WYWxpZGF0b3J8d2hhdHNhcHB8ZHVja2R1Y2tib3QvaS50ZXN0KFxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHNoYXJlZFByZXNldCA9IHtcbiAgZmluYWxseTogZW5kLFxuICBsb2FkSW1hZ2UsXG4gIHNldEVycm9ySW1hZ2UsXG4gIHNldExvYWRlZEltYWdlLFxuICBzZXR1cCxcbiAgaXNCb3Rcbn07XG4iXX0=