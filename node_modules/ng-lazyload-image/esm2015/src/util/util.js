export function getNavigator() {
    return typeof window !== 'undefined' ? window.navigator : undefined;
}
export function isChildOfPicture(element) {
    return Boolean(element.parentElement && element.parentElement.nodeName.toLowerCase() === 'picture');
}
export function isImageElement(element) {
    return element.nodeName.toLowerCase() === 'img';
}
export function setImage(element, imagePath, useSrcset) {
    if (isImageElement(element)) {
        if (useSrcset && 'srcset' in element) {
            element.srcset = imagePath;
        }
        else {
            element.src = imagePath;
        }
    }
    else {
        element.style.backgroundImage = `url('${imagePath}')`;
    }
    return element;
}
function setSources(attrName) {
    return (image) => {
        const sources = image.parentElement.getElementsByTagName('source');
        for (let i = 0; i < sources.length; i++) {
            const attrValue = sources[i].getAttribute(attrName);
            if (attrValue) {
                // Check if `srcset` is supported by the current browser
                if ('srcset' in sources[i]) {
                    sources[i].srcset = attrValue;
                }
                else {
                    sources[i].src = attrValue;
                }
            }
        }
    };
}
const setSourcesToDefault = setSources('defaultImage');
export const setSourcesToLazy = setSources('lazyLoad');
const setSourcesToError = setSources('errorImage');
function setImageAndSources(setSourcesFn) {
    return (element, imagePath, useSrcset) => {
        if (isImageElement(element) && isChildOfPicture(element)) {
            setSourcesFn(element);
        }
        if (imagePath) {
            setImage(element, imagePath, useSrcset);
        }
    };
}
export const setImageAndSourcesToDefault = setImageAndSources(setSourcesToDefault);
export const setImageAndSourcesToLazy = setImageAndSources(setSourcesToLazy);
export const setImageAndSourcesToError = setImageAndSources(setSourcesToError);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxhenlsb2FkLWltYWdlLyIsInNvdXJjZXMiOlsic3JjL3V0aWwvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFVBQVUsWUFBWTtJQUMxQixPQUFPLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3RFLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsT0FBMEM7SUFDekUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxTQUFTLENBQUMsQ0FBQztBQUN0RyxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxPQUEwQztJQUN2RSxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSyxDQUFDO0FBQ2xELENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLE9BQTBDLEVBQUUsU0FBaUIsRUFBRSxTQUFtQjtJQUN6RyxJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUMzQixJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksT0FBTyxFQUFFO1lBQ3BDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1NBQzVCO2FBQU07WUFDTCxPQUFPLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQztTQUN6QjtLQUNGO1NBQU07UUFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxRQUFRLFNBQVMsSUFBSSxDQUFDO0tBQ3ZEO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLFFBQWdCO0lBQ2xDLE9BQU8sQ0FBQyxLQUF1QixFQUFFLEVBQUU7UUFDakMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLGFBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN2QyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BELElBQUksU0FBUyxFQUFFO2dCQUNiLHdEQUF3RDtnQkFDeEQsSUFBSSxRQUFRLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUMxQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztpQkFDL0I7cUJBQU07b0JBQ0wsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUM7aUJBQzVCO2FBQ0Y7U0FDRjtJQUNILENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLG1CQUFtQixHQUFHLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDdkQsTUFBTSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFbkQsU0FBUyxrQkFBa0IsQ0FBQyxZQUErQztJQUN6RSxPQUFPLENBQUMsT0FBMEMsRUFBRSxTQUFrQixFQUFFLFNBQW1CLEVBQUUsRUFBRTtRQUM3RixJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN4RCxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdkI7UUFDRCxJQUFJLFNBQVMsRUFBRTtZQUNiLFFBQVEsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDbkYsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUM3RSxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGdldE5hdmlnYXRvcigpOiBOYXZpZ2F0b3IgfCB1bmRlZmluZWQge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cubmF2aWdhdG9yIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDaGlsZE9mUGljdHVyZShlbGVtZW50OiBIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTERpdkVsZW1lbnQpOiBib29sZWFuIHtcbiAgcmV0dXJuIEJvb2xlYW4oZWxlbWVudC5wYXJlbnRFbGVtZW50ICYmIGVsZW1lbnQucGFyZW50RWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAncGljdHVyZScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJbWFnZUVsZW1lbnQoZWxlbWVudDogSFRNTEltYWdlRWxlbWVudCB8IEhUTUxEaXZFbGVtZW50KTogZWxlbWVudCBpcyBIVE1MSW1hZ2VFbGVtZW50IHtcbiAgcmV0dXJuIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2ltZyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRJbWFnZShlbGVtZW50OiBIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTERpdkVsZW1lbnQsIGltYWdlUGF0aDogc3RyaW5nLCB1c2VTcmNzZXQ/OiBib29sZWFuKSB7XG4gIGlmIChpc0ltYWdlRWxlbWVudChlbGVtZW50KSkge1xuICAgIGlmICh1c2VTcmNzZXQgJiYgJ3NyY3NldCcgaW4gZWxlbWVudCkge1xuICAgICAgZWxlbWVudC5zcmNzZXQgPSBpbWFnZVBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuc3JjID0gaW1hZ2VQYXRoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoJyR7aW1hZ2VQYXRofScpYDtcbiAgfVxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gc2V0U291cmNlcyhhdHRyTmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiAoaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQpID0+IHtcbiAgICBjb25zdCBzb3VyY2VzID0gaW1hZ2UucGFyZW50RWxlbWVudCEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NvdXJjZScpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYXR0clZhbHVlID0gc291cmNlc1tpXS5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgICAgaWYgKGF0dHJWYWx1ZSkge1xuICAgICAgICAvLyBDaGVjayBpZiBgc3Jjc2V0YCBpcyBzdXBwb3J0ZWQgYnkgdGhlIGN1cnJlbnQgYnJvd3NlclxuICAgICAgICBpZiAoJ3NyY3NldCcgaW4gc291cmNlc1tpXSkge1xuICAgICAgICAgIHNvdXJjZXNbaV0uc3Jjc2V0ID0gYXR0clZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNvdXJjZXNbaV0uc3JjID0gYXR0clZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5jb25zdCBzZXRTb3VyY2VzVG9EZWZhdWx0ID0gc2V0U291cmNlcygnZGVmYXVsdEltYWdlJyk7XG5leHBvcnQgY29uc3Qgc2V0U291cmNlc1RvTGF6eSA9IHNldFNvdXJjZXMoJ2xhenlMb2FkJyk7XG5jb25zdCBzZXRTb3VyY2VzVG9FcnJvciA9IHNldFNvdXJjZXMoJ2Vycm9ySW1hZ2UnKTtcblxuZnVuY3Rpb24gc2V0SW1hZ2VBbmRTb3VyY2VzKHNldFNvdXJjZXNGbjogKGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50KSA9PiB2b2lkKSB7XG4gIHJldHVybiAoZWxlbWVudDogSFRNTEltYWdlRWxlbWVudCB8IEhUTUxEaXZFbGVtZW50LCBpbWFnZVBhdGg/OiBzdHJpbmcsIHVzZVNyY3NldD86IGJvb2xlYW4pID0+IHtcbiAgICBpZiAoaXNJbWFnZUVsZW1lbnQoZWxlbWVudCkgJiYgaXNDaGlsZE9mUGljdHVyZShlbGVtZW50KSkge1xuICAgICAgc2V0U291cmNlc0ZuKGVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoaW1hZ2VQYXRoKSB7XG4gICAgICBzZXRJbWFnZShlbGVtZW50LCBpbWFnZVBhdGgsIHVzZVNyY3NldCk7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgY29uc3Qgc2V0SW1hZ2VBbmRTb3VyY2VzVG9EZWZhdWx0ID0gc2V0SW1hZ2VBbmRTb3VyY2VzKHNldFNvdXJjZXNUb0RlZmF1bHQpO1xuZXhwb3J0IGNvbnN0IHNldEltYWdlQW5kU291cmNlc1RvTGF6eSA9IHNldEltYWdlQW5kU291cmNlcyhzZXRTb3VyY2VzVG9MYXp5KTtcbmV4cG9ydCBjb25zdCBzZXRJbWFnZUFuZFNvdXJjZXNUb0Vycm9yID0gc2V0SW1hZ2VBbmRTb3VyY2VzKHNldFNvdXJjZXNUb0Vycm9yKTtcbiJdfQ==