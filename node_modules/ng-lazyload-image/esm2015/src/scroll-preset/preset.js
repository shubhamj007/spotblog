import { startWith } from 'rxjs/operators';
import { sharedPreset } from '../shared-preset/preset';
import { Rect } from './rect';
import { getScrollListener } from './scroll-listener';
export const isVisible = ({ element, offset, scrollContainer }, getWindow = () => window) => {
    const elementBounds = Rect.fromElement(element);
    if (elementBounds === Rect.empty) {
        return false;
    }
    const windowBounds = Rect.fromWindow(getWindow());
    elementBounds.inflate(offset);
    if (scrollContainer) {
        const scrollContainerBounds = Rect.fromElement(scrollContainer);
        const intersection = scrollContainerBounds.getIntersectionWith(windowBounds);
        return elementBounds.intersectsWith(intersection);
    }
    else {
        return elementBounds.intersectsWith(windowBounds);
    }
};
const getObservable = (attributes) => {
    if (attributes.customObservable) {
        return attributes.customObservable.pipe(startWith(''));
    }
    if (attributes.scrollContainer) {
        return getScrollListener(attributes.scrollContainer);
    }
    return getScrollListener(window);
};
const ɵ0 = getObservable;
export const scrollPreset = Object.assign({}, sharedPreset, {
    isVisible,
    getObservable
});
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2Nyb2xsLXByZXNldC9wcmVzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzlCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXRELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBZ0MsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLEVBQUUsU0FBUyxHQUFHLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFO0lBQ3ZILE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEQsSUFBSSxhQUFhLEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNoQyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFOUIsSUFBSSxlQUFlLEVBQUU7UUFDbkIsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sWUFBWSxHQUFHLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzdFLE9BQU8sYUFBYSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUNuRDtTQUFNO1FBQ0wsT0FBTyxhQUFhLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQ25EO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxhQUFhLEdBQW9DLENBQUMsVUFBc0IsRUFBRSxFQUFFO0lBQ2hGLElBQUksVUFBVSxDQUFDLGdCQUFnQixFQUFFO1FBQy9CLE9BQU8sVUFBVSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN4RDtJQUNELElBQUksVUFBVSxDQUFDLGVBQWUsRUFBRTtRQUM5QixPQUFPLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztLQUN0RDtJQUNELE9BQU8saUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkMsQ0FBQyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBNEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFO0lBQ25GLFNBQVM7SUFDVCxhQUFhO0NBQ2QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RhcnRXaXRoIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgc2hhcmVkUHJlc2V0IH0gZnJvbSAnLi4vc2hhcmVkLXByZXNldC9wcmVzZXQnO1xuaW1wb3J0IHsgQXR0cmlidXRlcywgR2V0T2JzZXJ2YWJsZUZuLCBIb29rU2V0LCBJc1Zpc2libGVGbiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFJlY3QgfSBmcm9tICcuL3JlY3QnO1xuaW1wb3J0IHsgZ2V0U2Nyb2xsTGlzdGVuZXIgfSBmcm9tICcuL3Njcm9sbC1saXN0ZW5lcic7XG5cbmV4cG9ydCBjb25zdCBpc1Zpc2libGU6IElzVmlzaWJsZUZuPEV2ZW50IHwgc3RyaW5nPiA9ICh7IGVsZW1lbnQsIG9mZnNldCwgc2Nyb2xsQ29udGFpbmVyIH0sIGdldFdpbmRvdyA9ICgpID0+IHdpbmRvdykgPT4ge1xuICBjb25zdCBlbGVtZW50Qm91bmRzID0gUmVjdC5mcm9tRWxlbWVudChlbGVtZW50KTtcbiAgaWYgKGVsZW1lbnRCb3VuZHMgPT09IFJlY3QuZW1wdHkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3Qgd2luZG93Qm91bmRzID0gUmVjdC5mcm9tV2luZG93KGdldFdpbmRvdygpKTtcbiAgZWxlbWVudEJvdW5kcy5pbmZsYXRlKG9mZnNldCk7XG5cbiAgaWYgKHNjcm9sbENvbnRhaW5lcikge1xuICAgIGNvbnN0IHNjcm9sbENvbnRhaW5lckJvdW5kcyA9IFJlY3QuZnJvbUVsZW1lbnQoc2Nyb2xsQ29udGFpbmVyKTtcbiAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBzY3JvbGxDb250YWluZXJCb3VuZHMuZ2V0SW50ZXJzZWN0aW9uV2l0aCh3aW5kb3dCb3VuZHMpO1xuICAgIHJldHVybiBlbGVtZW50Qm91bmRzLmludGVyc2VjdHNXaXRoKGludGVyc2VjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsZW1lbnRCb3VuZHMuaW50ZXJzZWN0c1dpdGgod2luZG93Qm91bmRzKTtcbiAgfVxufTtcblxuY29uc3QgZ2V0T2JzZXJ2YWJsZTogR2V0T2JzZXJ2YWJsZUZuPEV2ZW50IHwgc3RyaW5nPiA9IChhdHRyaWJ1dGVzOiBBdHRyaWJ1dGVzKSA9PiB7XG4gIGlmIChhdHRyaWJ1dGVzLmN1c3RvbU9ic2VydmFibGUpIHtcbiAgICByZXR1cm4gYXR0cmlidXRlcy5jdXN0b21PYnNlcnZhYmxlLnBpcGUoc3RhcnRXaXRoKCcnKSk7XG4gIH1cbiAgaWYgKGF0dHJpYnV0ZXMuc2Nyb2xsQ29udGFpbmVyKSB7XG4gICAgcmV0dXJuIGdldFNjcm9sbExpc3RlbmVyKGF0dHJpYnV0ZXMuc2Nyb2xsQ29udGFpbmVyKTtcbiAgfVxuICByZXR1cm4gZ2V0U2Nyb2xsTGlzdGVuZXIod2luZG93KTtcbn07XG5cbmV4cG9ydCBjb25zdCBzY3JvbGxQcmVzZXQ6IEhvb2tTZXQ8RXZlbnQgfCBzdHJpbmc+ID0gT2JqZWN0LmFzc2lnbih7fSwgc2hhcmVkUHJlc2V0LCB7XG4gIGlzVmlzaWJsZSxcbiAgZ2V0T2JzZXJ2YWJsZVxufSk7XG4iXX0=