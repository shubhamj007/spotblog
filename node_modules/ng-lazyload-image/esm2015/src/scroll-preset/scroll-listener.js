import { empty, Observable } from 'rxjs';
import { sampleTime, share, startWith } from 'rxjs/operators';
const scrollListeners = new WeakMap();
export function sampleObservable(obs, scheduler) {
    return obs.pipe(sampleTime(100, scheduler), share(), startWith(''));
}
// Only create one scroll listener per target and share the observable.
// Typical, there will only be one observable per application
export const getScrollListener = (scrollTarget) => {
    if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {
        console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');
        return empty();
    }
    const scrollListener = scrollListeners.get(scrollTarget);
    if (scrollListener) {
        return scrollListener;
    }
    const srollEvent = Observable.create((observer) => {
        const eventName = 'scroll';
        const handler = (event) => observer.next(event);
        const options = { passive: true, capture: false };
        scrollTarget.addEventListener(eventName, handler, options);
        return () => scrollTarget.removeEventListener(eventName, handler, options);
    });
    const listener = sampleObservable(srollEvent);
    scrollListeners.set(scrollTarget, listener);
    return listener;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWxpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2Nyb2xsLXByZXNldC9zY3JvbGwtbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQVcsTUFBTSxNQUFNLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUQsTUFBTSxlQUFlLEdBQUcsSUFBSSxPQUFPLEVBQXdCLENBQUM7QUFFNUQsTUFBTSxVQUFVLGdCQUFnQixDQUFJLEdBQWtCLEVBQUUsU0FBZTtJQUNyRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQ2IsVUFBVSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsRUFDMUIsS0FBSyxFQUFFLEVBQ1AsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUNkLENBQUM7QUFDSixDQUFDO0FBRUQsdUVBQXVFO0FBQ3ZFLDZEQUE2RDtBQUM3RCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFlBQW1DLEVBQTBCLEVBQUU7SUFDL0YsSUFBSSxDQUFDLFlBQVksSUFBSSxPQUFPLFlBQVksQ0FBQyxnQkFBZ0IsS0FBSyxVQUFVLEVBQUU7UUFDeEUsT0FBTyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxZQUFZLEdBQUcseURBQXlELENBQUMsQ0FBQztRQUNsSCxPQUFPLEtBQUssRUFBRSxDQUFDO0tBQ2hCO0lBQ0QsTUFBTSxjQUFjLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6RCxJQUFJLGNBQWMsRUFBRTtRQUNsQixPQUFPLGNBQWMsQ0FBQztLQUN2QjtJQUVELE1BQU0sVUFBVSxHQUFzQixVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBd0IsRUFBRSxFQUFFO1FBQ25GLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMzQixNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RCxNQUFNLE9BQU8sR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQ2xELFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzNELE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0UsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5QyxlQUFlLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM1QyxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbXB0eSwgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc2FtcGxlVGltZSwgc2hhcmUsIHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuY29uc3Qgc2Nyb2xsTGlzdGVuZXJzID0gbmV3IFdlYWtNYXA8YW55LCBPYnNlcnZhYmxlPGFueT4+KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW1wbGVPYnNlcnZhYmxlPFQ+KG9iczogT2JzZXJ2YWJsZTxUPiwgc2NoZWR1bGVyPzogYW55KTogT2JzZXJ2YWJsZTxUIHwgJyc+IHtcbiAgcmV0dXJuIG9icy5waXBlKFxuICAgIHNhbXBsZVRpbWUoMTAwLCBzY2hlZHVsZXIpLFxuICAgIHNoYXJlKCksXG4gICAgc3RhcnRXaXRoKCcnKVxuICApO1xufVxuXG4vLyBPbmx5IGNyZWF0ZSBvbmUgc2Nyb2xsIGxpc3RlbmVyIHBlciB0YXJnZXQgYW5kIHNoYXJlIHRoZSBvYnNlcnZhYmxlLlxuLy8gVHlwaWNhbCwgdGhlcmUgd2lsbCBvbmx5IGJlIG9uZSBvYnNlcnZhYmxlIHBlciBhcHBsaWNhdGlvblxuZXhwb3J0IGNvbnN0IGdldFNjcm9sbExpc3RlbmVyID0gKHNjcm9sbFRhcmdldD86IEhUTUxFbGVtZW50IHwgV2luZG93KTogT2JzZXJ2YWJsZTxFdmVudCB8ICcnPiA9PiB7XG4gIGlmICghc2Nyb2xsVGFyZ2V0IHx8IHR5cGVvZiBzY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUud2FybignYGFkZEV2ZW50TGlzdGVuZXJgIG9uICcgKyBzY3JvbGxUYXJnZXQgKyAnIChzY3JvbGxUYXJnZXQpIGlzIG5vdCBhIGZ1bmN0aW9uLiBTa2lwcGluZyB0aGlzIHRhcmdldCcpO1xuICAgIHJldHVybiBlbXB0eSgpO1xuICB9XG4gIGNvbnN0IHNjcm9sbExpc3RlbmVyID0gc2Nyb2xsTGlzdGVuZXJzLmdldChzY3JvbGxUYXJnZXQpO1xuICBpZiAoc2Nyb2xsTGlzdGVuZXIpIHtcbiAgICByZXR1cm4gc2Nyb2xsTGlzdGVuZXI7XG4gIH1cblxuICBjb25zdCBzcm9sbEV2ZW50OiBPYnNlcnZhYmxlPEV2ZW50PiA9IE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcjogU3ViamVjdDxFdmVudD4pID0+IHtcbiAgICBjb25zdCBldmVudE5hbWUgPSAnc2Nyb2xsJztcbiAgICBjb25zdCBoYW5kbGVyID0gKGV2ZW50OiBFdmVudCkgPT4gb2JzZXJ2ZXIubmV4dChldmVudCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfTtcbiAgICBzY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiBzY3JvbGxUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICB9KTtcblxuICBjb25zdCBsaXN0ZW5lciA9IHNhbXBsZU9ic2VydmFibGUoc3JvbGxFdmVudCk7XG4gIHNjcm9sbExpc3RlbmVycy5zZXQoc2Nyb2xsVGFyZ2V0LCBsaXN0ZW5lcik7XG4gIHJldHVybiBsaXN0ZW5lcjtcbn07XG4iXX0=