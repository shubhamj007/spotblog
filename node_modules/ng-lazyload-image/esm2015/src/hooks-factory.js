import { intersectionObserverPreset } from './intersection-observer-preset';
import { ssrPreset } from './ssr-preset';
import { getNavigator } from './util';
export function createHooks(platformId, options) {
    const defaultPreset = intersectionObserverPreset;
    const isBot = options && options.isBot ? options.isBot : defaultPreset.isBot;
    if (isBot(getNavigator(), platformId)) {
        return Object.assign(ssrPreset, { isBot });
    }
    else if (!options) {
        return defaultPreset;
    }
    const hooks = {};
    if (options.preset) {
        Object.assign(hooks, options.preset);
    }
    else {
        Object.assign(hooks, defaultPreset);
    }
    Object.keys(options)
        .filter(key => key !== 'preset')
        .forEach(key => {
        hooks[key] = options[key];
    });
    return hooks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9va3MtZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxhenlsb2FkLWltYWdlLyIsInNvdXJjZXMiOlsic3JjL2hvb2tzLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDNUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXRDLE1BQU0sVUFBVSxXQUFXLENBQUksVUFBa0IsRUFBRSxPQUEwQjtJQUMzRSxNQUFNLGFBQWEsR0FBRywwQkFBMEIsQ0FBQztJQUNqRCxNQUFNLEtBQUssR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUU3RSxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUUsRUFBRSxVQUFVLENBQUMsRUFBRTtRQUNyQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUM1QztTQUFNLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDbkIsT0FBTyxhQUFhLENBQUM7S0FDdEI7SUFFRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDakIsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1FBQ2xCLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN0QztTQUFNO1FBQ0wsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7S0FDckM7SUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNqQixNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssUUFBUSxDQUFDO1NBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNiLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxPQUFPLEtBQXFCLENBQUM7QUFDL0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludGVyc2VjdGlvbk9ic2VydmVyUHJlc2V0IH0gZnJvbSAnLi9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXItcHJlc2V0JztcbmltcG9ydCB7IHNzclByZXNldCB9IGZyb20gJy4vc3NyLXByZXNldCc7XG5pbXBvcnQgeyBIb29rU2V0LCBNb2R1bGVPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBnZXROYXZpZ2F0b3IgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSG9va3M8RT4ocGxhdGZvcm1JZDogT2JqZWN0LCBvcHRpb25zPzogTW9kdWxlT3B0aW9uczxFPik6IEhvb2tTZXQ8YW55PiB7XG4gIGNvbnN0IGRlZmF1bHRQcmVzZXQgPSBpbnRlcnNlY3Rpb25PYnNlcnZlclByZXNldDtcbiAgY29uc3QgaXNCb3QgPSBvcHRpb25zICYmIG9wdGlvbnMuaXNCb3QgPyBvcHRpb25zLmlzQm90IDogZGVmYXVsdFByZXNldC5pc0JvdDtcblxuICBpZiAoaXNCb3QoZ2V0TmF2aWdhdG9yKCksIHBsYXRmb3JtSWQpKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc3NyUHJlc2V0LCB7IGlzQm90IH0pO1xuICB9IGVsc2UgaWYgKCFvcHRpb25zKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRQcmVzZXQ7XG4gIH1cblxuICBjb25zdCBob29rcyA9IHt9O1xuICBpZiAob3B0aW9ucy5wcmVzZXQpIHtcbiAgICBPYmplY3QuYXNzaWduKGhvb2tzLCBvcHRpb25zLnByZXNldCk7XG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmFzc2lnbihob29rcywgZGVmYXVsdFByZXNldCk7XG4gIH1cbiAgT2JqZWN0LmtleXMob3B0aW9ucylcbiAgICAuZmlsdGVyKGtleSA9PiBrZXkgIT09ICdwcmVzZXQnKVxuICAgIC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBob29rc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgIH0pO1xuICByZXR1cm4gaG9va3MgYXMgSG9va1NldDxhbnk+O1xufVxuIl19