import { cssClassNames, hasCssClassName, removeCssClassName, addCssClassName, isImageElement, isChildOfPicture, setSourcesToLazy, setImage, setImageAndSourcesToError, setImageAndSourcesToLazy, setImageAndSourcesToDefault } from '../util';
const end = ({ element }) => addCssClassName(element, cssClassNames.loaded);
const ɵ0 = end;
export const loadImage = ({ element, useSrcset, imagePath, decode }) => {
    let img;
    if (isImageElement(element) && isChildOfPicture(element)) {
        const parentClone = element.parentNode.cloneNode(true);
        img = parentClone.getElementsByTagName('img')[0];
        setSourcesToLazy(img);
        setImage(img, imagePath, useSrcset);
    }
    else {
        img = new Image();
        if (isImageElement(element) && element.sizes) {
            img.sizes = element.sizes;
        }
        if (useSrcset && 'srcset' in img) {
            img.srcset = imagePath;
        }
        else {
            img.src = imagePath;
        }
    }
    if (decode && img.decode) {
        return img.decode().then(() => imagePath);
    }
    return new Promise((resolve, reject) => {
        img.onload = () => resolve(imagePath);
        img.onerror = () => reject(null);
    });
};
const setErrorImage = ({ element, errorImagePath, useSrcset }) => {
    setImageAndSourcesToError(element, errorImagePath, useSrcset);
    addCssClassName(element, cssClassNames.failed);
};
const ɵ1 = setErrorImage;
const setLoadedImage = ({ element, imagePath, useSrcset }) => {
    setImageAndSourcesToLazy(element, imagePath, useSrcset);
};
const ɵ2 = setLoadedImage;
const setup = ({ element, defaultImagePath, useSrcset }) => {
    setImageAndSourcesToDefault(element, defaultImagePath, useSrcset);
    if (hasCssClassName(element, cssClassNames.loaded)) {
        removeCssClassName(element, cssClassNames.loaded);
    }
};
const ɵ3 = setup;
export const isBot = navigator => {
    if (navigator && navigator.userAgent) {
        return /googlebot|bingbot|yandex|baiduspider|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora\ link\ preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|duckduckbot/i.test(navigator.userAgent);
    }
    return false;
};
export const sharedPreset = {
    finally: end,
    loadImage,
    setErrorImage,
    setLoadedImage,
    setup,
    isBot
};
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2hhcmVkLXByZXNldC9wcmVzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGFBQWEsRUFDYixlQUFlLEVBQ2Ysa0JBQWtCLEVBQ2xCLGVBQWUsRUFDZixjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixRQUFRLEVBQ1IseUJBQXlCLEVBQ3pCLHdCQUF3QixFQUN4QiwyQkFBMkIsRUFDNUIsTUFBTSxTQUFTLENBQUM7QUFHakIsTUFBTSxHQUFHLEdBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFdkYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtJQUNsRixJQUFJLEdBQXFCLENBQUM7SUFDMUIsSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDeEQsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLFVBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUF1QixDQUFDO1FBQzlFLEdBQUcsR0FBRyxXQUFXLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakQsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsUUFBUSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDckM7U0FBTTtRQUNMLEdBQUcsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ2xCLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDNUMsR0FBRyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLEdBQUcsRUFBRTtZQUNoQyxHQUFHLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztTQUN4QjthQUFNO1lBQ0wsR0FBRyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUM7U0FDckI7S0FDRjtJQUVELElBQUksTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7UUFDeEIsT0FBTyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQzNDO0lBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNyQyxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sYUFBYSxHQUFvQixDQUFDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFO0lBQ2hGLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDOUQsZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDOztBQUVGLE1BQU0sY0FBYyxHQUFxQixDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFO0lBQzdFLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFDOztBQUVGLE1BQU0sS0FBSyxHQUFZLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRTtJQUNsRSwyQkFBMkIsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFbEUsSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNsRCxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ25EO0FBQ0gsQ0FBQyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBWSxTQUFTLENBQUMsRUFBRTtJQUN4QyxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFO1FBQ3BDLE9BQU8sNE5BQTROLENBQUMsSUFBSSxDQUN0TyxTQUFTLENBQUMsU0FBUyxDQUNwQixDQUFDO0tBQ0g7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRztJQUMxQixPQUFPLEVBQUUsR0FBRztJQUNaLFNBQVM7SUFDVCxhQUFhO0lBQ2IsY0FBYztJQUNkLEtBQUs7SUFDTCxLQUFLO0NBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNzc0NsYXNzTmFtZXMsXG4gIGhhc0Nzc0NsYXNzTmFtZSxcbiAgcmVtb3ZlQ3NzQ2xhc3NOYW1lLFxuICBhZGRDc3NDbGFzc05hbWUsXG4gIGlzSW1hZ2VFbGVtZW50LFxuICBpc0NoaWxkT2ZQaWN0dXJlLFxuICBzZXRTb3VyY2VzVG9MYXp5LFxuICBzZXRJbWFnZSxcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9FcnJvcixcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9MYXp5LFxuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0RlZmF1bHRcbn0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBGaW5hbGx5Rm4sIExvYWRJbWFnZUZuLCBTZXRFcnJvckltYWdlRm4sIFNldExvYWRlZEltYWdlRm4sIFNldHVwRm4sIElzQm90Rm4gfSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IGVuZDogRmluYWxseUZuID0gKHsgZWxlbWVudCB9KSA9PiBhZGRDc3NDbGFzc05hbWUoZWxlbWVudCwgY3NzQ2xhc3NOYW1lcy5sb2FkZWQpO1xuXG5leHBvcnQgY29uc3QgbG9hZEltYWdlOiBMb2FkSW1hZ2VGbiA9ICh7IGVsZW1lbnQsIHVzZVNyY3NldCwgaW1hZ2VQYXRoLCBkZWNvZGUgfSkgPT4ge1xuICBsZXQgaW1nOiBIVE1MSW1hZ2VFbGVtZW50O1xuICBpZiAoaXNJbWFnZUVsZW1lbnQoZWxlbWVudCkgJiYgaXNDaGlsZE9mUGljdHVyZShlbGVtZW50KSkge1xuICAgIGNvbnN0IHBhcmVudENsb25lID0gZWxlbWVudC5wYXJlbnROb2RlIS5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTFBpY3R1cmVFbGVtZW50O1xuICAgIGltZyA9IHBhcmVudENsb25lLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKVswXTtcbiAgICBzZXRTb3VyY2VzVG9MYXp5KGltZyk7XG4gICAgc2V0SW1hZ2UoaW1nLCBpbWFnZVBhdGgsIHVzZVNyY3NldCk7XG4gIH0gZWxzZSB7XG4gICAgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgaWYgKGlzSW1hZ2VFbGVtZW50KGVsZW1lbnQpICYmIGVsZW1lbnQuc2l6ZXMpIHtcbiAgICAgIGltZy5zaXplcyA9IGVsZW1lbnQuc2l6ZXM7XG4gICAgfVxuICAgIGlmICh1c2VTcmNzZXQgJiYgJ3NyY3NldCcgaW4gaW1nKSB7XG4gICAgICBpbWcuc3Jjc2V0ID0gaW1hZ2VQYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbWcuc3JjID0gaW1hZ2VQYXRoO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkZWNvZGUgJiYgaW1nLmRlY29kZSkge1xuICAgIHJldHVybiBpbWcuZGVjb2RlKCkudGhlbigoKSA9PiBpbWFnZVBhdGgpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpbWcub25sb2FkID0gKCkgPT4gcmVzb2x2ZShpbWFnZVBhdGgpO1xuICAgIGltZy5vbmVycm9yID0gKCkgPT4gcmVqZWN0KG51bGwpO1xuICB9KTtcbn07XG5cbmNvbnN0IHNldEVycm9ySW1hZ2U6IFNldEVycm9ySW1hZ2VGbiA9ICh7IGVsZW1lbnQsIGVycm9ySW1hZ2VQYXRoLCB1c2VTcmNzZXQgfSkgPT4ge1xuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0Vycm9yKGVsZW1lbnQsIGVycm9ySW1hZ2VQYXRoLCB1c2VTcmNzZXQpO1xuICBhZGRDc3NDbGFzc05hbWUoZWxlbWVudCwgY3NzQ2xhc3NOYW1lcy5mYWlsZWQpO1xufTtcblxuY29uc3Qgc2V0TG9hZGVkSW1hZ2U6IFNldExvYWRlZEltYWdlRm4gPSAoeyBlbGVtZW50LCBpbWFnZVBhdGgsIHVzZVNyY3NldCB9KSA9PiB7XG4gIHNldEltYWdlQW5kU291cmNlc1RvTGF6eShlbGVtZW50LCBpbWFnZVBhdGgsIHVzZVNyY3NldCk7XG59O1xuXG5jb25zdCBzZXR1cDogU2V0dXBGbiA9ICh7IGVsZW1lbnQsIGRlZmF1bHRJbWFnZVBhdGgsIHVzZVNyY3NldCB9KSA9PiB7XG4gIHNldEltYWdlQW5kU291cmNlc1RvRGVmYXVsdChlbGVtZW50LCBkZWZhdWx0SW1hZ2VQYXRoLCB1c2VTcmNzZXQpO1xuXG4gIGlmIChoYXNDc3NDbGFzc05hbWUoZWxlbWVudCwgY3NzQ2xhc3NOYW1lcy5sb2FkZWQpKSB7XG4gICAgcmVtb3ZlQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMubG9hZGVkKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGlzQm90OiBJc0JvdEZuID0gbmF2aWdhdG9yID0+IHtcbiAgaWYgKG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50KSB7XG4gICAgcmV0dXJuIC9nb29nbGVib3R8YmluZ2JvdHx5YW5kZXh8YmFpZHVzcGlkZXJ8ZmFjZWJvb2tleHRlcm5hbGhpdHx0d2l0dGVyYm90fHJvZ2VyYm90fGxpbmtlZGluYm90fGVtYmVkbHl8cXVvcmFcXCBsaW5rXFwgcHJldmlld3xzaG93eW91Ym90fG91dGJyYWlufHBpbnRlcmVzdFxcLzBcXC58cGludGVyZXN0Ym90fHNsYWNrYm90fHZrU2hhcmV8VzNDX1ZhbGlkYXRvcnx3aGF0c2FwcHxkdWNrZHVja2JvdC9pLnRlc3QoXG4gICAgICBuYXZpZ2F0b3IudXNlckFnZW50XG4gICAgKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnQgY29uc3Qgc2hhcmVkUHJlc2V0ID0ge1xuICBmaW5hbGx5OiBlbmQsXG4gIGxvYWRJbWFnZSxcbiAgc2V0RXJyb3JJbWFnZSxcbiAgc2V0TG9hZGVkSW1hZ2UsXG4gIHNldHVwLFxuICBpc0JvdFxufTtcbiJdfQ==