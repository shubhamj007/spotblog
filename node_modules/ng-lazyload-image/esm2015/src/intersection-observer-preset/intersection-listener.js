import { Observable, Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
const observers = new WeakMap();
const intersectionSubject = new Subject();
function loadingCallback(entrys) {
    entrys.forEach(entry => intersectionSubject.next(entry));
}
const uniqKey = {};
export const getIntersectionObserver = (attributes) => {
    const scrollContainerKey = attributes.scrollContainer || uniqKey;
    const options = {
        root: attributes.scrollContainer || null
    };
    if (attributes.offset) {
        options.rootMargin = `${attributes.offset}px`;
    }
    let observer = observers.get(scrollContainerKey);
    if (!observer) {
        observer = new IntersectionObserver(loadingCallback, options);
        observers.set(scrollContainerKey, observer);
    }
    observer.observe(attributes.element);
    return Observable.create((obs) => {
        const subscription = intersectionSubject.pipe(filter(entry => entry.target === attributes.element)).subscribe(obs);
        return () => {
            subscription.unsubscribe();
            observer.unobserve(attributes.element);
        };
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLWxpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvaW50ZXJzZWN0aW9uLW9ic2VydmVyLXByZXNldC9pbnRlcnNlY3Rpb24tbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBUXhDLE1BQU0sU0FBUyxHQUFHLElBQUksT0FBTyxFQUFzQyxDQUFDO0FBRXBFLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxPQUFPLEVBQTZCLENBQUM7QUFFckUsU0FBUyxlQUFlLENBQUMsTUFBbUM7SUFDMUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFFbkIsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxVQUFzQixFQUF5QyxFQUFFO0lBQ3ZHLE1BQU0sa0JBQWtCLEdBQUcsVUFBVSxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUM7SUFDakUsTUFBTSxPQUFPLEdBQW9CO1FBQy9CLElBQUksRUFBRSxVQUFVLENBQUMsZUFBZSxJQUFJLElBQUk7S0FDekMsQ0FBQztJQUNGLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTtRQUNyQixPQUFPLENBQUMsVUFBVSxHQUFHLEdBQUcsVUFBVSxDQUFDLE1BQU0sSUFBSSxDQUFDO0tBQy9DO0lBRUQsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBRWpELElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDYixRQUFRLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDOUQsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUM3QztJQUVELFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXJDLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQXVDLEVBQUUsRUFBRTtRQUNuRSxNQUFNLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkgsT0FBTyxHQUFHLEVBQUU7WUFDVixZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDM0IsUUFBUyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVzIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG50eXBlIE9ic2VydmVyT3B0aW9ucyA9IHtcbiAgcm9vdDogRWxlbWVudCB8IG51bGw7XG4gIHJvb3RNYXJnaW4/OiBzdHJpbmc7XG59O1xuXG5jb25zdCBvYnNlcnZlcnMgPSBuZXcgV2Vha01hcDxFbGVtZW50IHwge30sIEludGVyc2VjdGlvbk9ic2VydmVyPigpO1xuXG5jb25zdCBpbnRlcnNlY3Rpb25TdWJqZWN0ID0gbmV3IFN1YmplY3Q8SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeT4oKTtcblxuZnVuY3Rpb24gbG9hZGluZ0NhbGxiYWNrKGVudHJ5czogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVtdKSB7XG4gIGVudHJ5cy5mb3JFYWNoKGVudHJ5ID0+IGludGVyc2VjdGlvblN1YmplY3QubmV4dChlbnRyeSkpO1xufVxuXG5jb25zdCB1bmlxS2V5ID0ge307XG5cbmV4cG9ydCBjb25zdCBnZXRJbnRlcnNlY3Rpb25PYnNlcnZlciA9IChhdHRyaWJ1dGVzOiBBdHRyaWJ1dGVzKTogT2JzZXJ2YWJsZTxJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5PiA9PiB7XG4gIGNvbnN0IHNjcm9sbENvbnRhaW5lcktleSA9IGF0dHJpYnV0ZXMuc2Nyb2xsQ29udGFpbmVyIHx8IHVuaXFLZXk7XG4gIGNvbnN0IG9wdGlvbnM6IE9ic2VydmVyT3B0aW9ucyA9IHtcbiAgICByb290OiBhdHRyaWJ1dGVzLnNjcm9sbENvbnRhaW5lciB8fCBudWxsXG4gIH07XG4gIGlmIChhdHRyaWJ1dGVzLm9mZnNldCkge1xuICAgIG9wdGlvbnMucm9vdE1hcmdpbiA9IGAke2F0dHJpYnV0ZXMub2Zmc2V0fXB4YDtcbiAgfVxuXG4gIGxldCBvYnNlcnZlciA9IG9ic2VydmVycy5nZXQoc2Nyb2xsQ29udGFpbmVyS2V5KTtcblxuICBpZiAoIW9ic2VydmVyKSB7XG4gICAgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIobG9hZGluZ0NhbGxiYWNrLCBvcHRpb25zKTtcbiAgICBvYnNlcnZlcnMuc2V0KHNjcm9sbENvbnRhaW5lcktleSwgb2JzZXJ2ZXIpO1xuICB9XG5cbiAgb2JzZXJ2ZXIub2JzZXJ2ZShhdHRyaWJ1dGVzLmVsZW1lbnQpO1xuXG4gIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzOiBTdWJqZWN0PEludGVyc2VjdGlvbk9ic2VydmVyRW50cnk+KSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gaW50ZXJzZWN0aW9uU3ViamVjdC5waXBlKGZpbHRlcihlbnRyeSA9PiBlbnRyeS50YXJnZXQgPT09IGF0dHJpYnV0ZXMuZWxlbWVudCkpLnN1YnNjcmliZShvYnMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIG9ic2VydmVyIS51bm9ic2VydmUoYXR0cmlidXRlcy5lbGVtZW50KTtcbiAgICB9O1xuICB9KTtcbn07XG4iXX0=